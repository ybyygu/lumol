initSidebarItems({"enum":[["CellShape","The shape of a cell determine how we will be able to compute the periodic boundaries condition."],["DegreesOfFreedom","The number of degrees of freedom simulated in a given system"],["OpenMode","Possible modes when opening a `Trajectory`."]],"fn":[["get_atomic_mass","Get the mass of the element with the given atomic `name`"],["read_molecule","Read a the first molecule from the file at `path`. If no bond information exists in the file, bonds are guessed."]],"mod":[["compute","Algorithm to compute physical properties of a System"]],"struct":[["Angle","An `Angle` formed by the particles at indexes `i`, `j` and `k`"],["Bond","A `Bond` between the particles at indexes `i` and `j`"],["BondDistances","The `BondDistances` bitflag encode the topological distance between two particles in the molecule, i.e. the number of bonds between the particles. Two particles can have multiple bond path lionking them (in the case of cyclic molecules), which is why a bit flag is used instead of a single distance value."],["Bonding","The basic building block for a topology. A `Bonding` contains data about the connectivity (bonds, angles, dihedrals) between particles in a single molecule."],["Composition","The system composition contains the number of particles of each kind in the system, as well as the number of molecules of each molecule type."],["Configuration","The `Configuration` contains the physical data of the system:"],["Dihedral","A `Dihedral` angle formed by the particles at indexes `i`, `j`, `k` and `m`"],["EnergyCache","This is a cache for energy computation."],["EnergyEvaluator","An helper struct to evaluate energy components of a system."],["Molecule","A Molecule associate some particles bonded together."],["MoleculeHash","A molecule hash allow to identify a molecule from its atoms and bonds, and to know wether two molecules are the same without checking each atom and bond."],["MoleculeIter","An iterator over all the molecules in a `Configuration`"],["MoleculeIterMut","A mutable iterator over all the molecules in a `Configuration`"],["MoleculeRef","An analog to [`&Molecule`] using particles stored elsewhere (in a system or an [`Molecule`])."],["MoleculeRefMut","An analog to [`&mut Molecule`] using particles stored elsewhere (in a system or an [`Molecule`])."],["Particle","The Particle type hold basic data about a particle in the system. It is self contained, so that it will be easy to send data between parallels processes."],["ParticleKind","A particle kind. Particles with the same name will have the same kind. This is used for faster potential lookup."],["ParticlePtr","An analog of a pointer to `Particle`  with struct of array layout."],["ParticlePtrMut","An analog of a mutable pointer to `Particle`  with struct of array layout."],["ParticleRef","A reference to a `Particle`  with struct of array layout."],["ParticleRefMut","A mutable reference to a `Particle`  with struct of array layout."],["ParticleSlice","A slice of `Particle`  inside a `ParticleVec`  ."],["ParticleSliceMut","A mutable slice of `Particle`  inside a `ParticleVec`  ."],["ParticleVec","An analog to `Vec<Particle>` with Struct of Array (SoA) layout"],["System","The `System` type hold all the data about a simulated system."],["Trajectory","A Trajectory is a file containing one or more successive simulation steps."],["TrajectoryBuilder","A `Trajectory` builder, to set some options before opening a trajectory."],["TrajectoryError","Possible error when reading and writing to trajectories"],["UnitCell","An UnitCell defines the system physical boundaries."]]});